{! import bools !}

--!-- adder example

cin     := F
halfAdd := λλ (xor 0 1)
add     := λλ (xor cin halfAdd{0, 1}) 
cout    := λλ or { (and 0 1)
                 , (and cin halfAdd{0, 1})
                 }

chs := λ (0 UNL{.T} UNL{.F})
out := λ (chs{0} (λ0)) :: 1

{-
Note that binary values here are encoded
like bools.

T --> λλ1 --> ``kXY   --> <k>
F --> λλ0 --> ```kiXY --> <k><i>

Using the 'out' function, we can generate
Unlambda code that prints 'T' or 'F'!
-}

!! out{
		add{ F , T }
      } 

{- 
This program has a few examples of
appropriate function and application
syntax usage.

functional  syntax =>  F {X, Y}
application syntax => (F  X  Y)

These are semantically equivalent
but the functional syntax is more
powerful.
-}
