{!
import list
import comb
import bool
import church
!}

--!-- STANDARD LIB
----- contains all of prelude
----- aswell as some useful functions

--!-- nice
-- the nth fibonacci number
fib := λ (0 (λλλ (2 0 (add 0 1))) K n0 n1) :: 1

-- the iota combinator
ι  := λ (0 S K)

-- church 0, using iota
ι0 := ((ι (ι (ι ι))) (ι ι))

--!-- predicates
isZero := λ (0 (λ F) T) :: 1
leq    := λλ (isZero (sub 1 0))
eq     := λλ and {(leq 1 0), (leq 0 1)}
lt     := λλ not{leq{0, 1}}
gt     := λλ not{leq{1, 0}}

-- sub, but safe i guess
subSafeE := (UNL{r} PRT{***Exception} UNL{r} PRT{Prelude.church.negativeNumber})
subSafe := λλ (gt{0, 1} (UNL{e} subSafeE) sub{1, 0})

--!-- formatters
{-
lst := cons{ UNL{.0}, cons{ UNL{.1}, cons{ UNL{.2}, cons{ UNL{.3}, cons{ UNL{.4}
     , cons{ UNL{.5}, cons{ UNL{.6}, cons{ UNL{.7}, cons{ UNL{.8}, cons{ UNL{.9}
     , cons{ UNL{.a}, cons{ UNL{.b}, cons{ UNL{.c}, cons{ UNL{.d}, cons{ UNL{.e}
     , cons{ UNL{.f}, cons{ UNL{.g}, cons{ UNL{.h}, cons{ UNL{.i}, cons{ UNL{.j}
     , cons{ UNL{.k}, cons{ UNL{.l}, cons{ UNL{.m}, cons{ UNL{.n}, cons{ UNL{.o}
     , cons{ UNL{.p}, cons{ UNL{.q}, cons{ UNL{.r}, cons{ UNL{.s}, cons{ UNL{.t}
     , cons{ UNL{.u}, cons{ UNL{.v}, cons{ UNL{.w}, cons{ UNL{.x}, cons{ UNL{.y}
     , cons{ UNL{.z}, cons{ UNL{.å}, cons{ UNL{.ä}, cons{ UNL{.ö}, cons{ UNL{.A}
     , cons{ UNL{.B}, cons{ UNL{.C}, cons{ UNL{.D}, cons{ UNL{.E}, cons{ UNL{.F}
     , cons{ UNL{.G}, cons{ UNL{.H}, cons{ UNL{.I}, cons{ UNL{.J}, cons{ UNL{.K}
     , cons{ UNL{.L}, cons{ UNL{.M}, cons{ UNL{.N}, cons{ UNL{.O}, cons{ UNL{.P}
     , cons{ UNL{.Q}, cons{ UNL{.R}, cons{ UNL{.S}, cons{ UNL{.T}, cons{ UNL{.U}
     , cons{ UNL{.V}, cons{ UNL{.W}, cons{ UNL{.X}, cons{ UNL{.Y}, cons{ UNL{.Z}
     , cons{ UNL{.Å}, cons{ UNL{.Ä}, cons{ UNL{.Ö}, cons{ UNL{.*}, cons{ UNL{.!}
     , nil}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}
-}

numlst := PRT[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100]
wordnums := PRT[zero,one,two,three,four,five,six,seven,eight,nine,ten,eleven,twelve,thirteen,fourteen,fifteen,sixteen,seventeen,eighteen,nineteen,twenty,twenyone,twentytwo,twentythree,twentyfour,twentyfive,twentysix,twentyseven,twentyeight,twentynine,thirty,thirtyone,thirtytwo]

-- prints numbers instead of stars
formatNumLst := λ get{0, numlst} :: 1
formatWrdLst := λ get{0, wordnums} :: 1

-- nice
formatUnl := λ (0 I)

-- formats a length 3 list
fget     := λ (2 (get 0 1)) 
formatV3 := λλ (UNL{.[} UNL{.,} fget{n0} UNL{.,} fget{n1} UNL{.]} fget{n2})

--!-- ease of use functions

-- will make a macro for this later!
-- makes a program stop
-- Usage:
-- (error PRT{doodoo})
error := λ (UNL{e} (UNL{r} PRT{***Exception} 0))

-- makes unfinished functions easing to read
-- div := undefined
-- running this will make the program to print an error message
undefined := (error PRT{Prelude.std.undefined})

-- makes some nested ternary operators
-- (if statements) prettier
-- Or am I bullshitting
-- TODO look over this
otherwise := T
